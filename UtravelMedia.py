import config
import logging
from aiogram import Bot, Dispatcher, executor, types

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)


words = ['–î–µ–º–∏–¥–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥',
         '–¢—É—Ä–≥–æ—è–∫',
         '–£—Ä–∞–ª—å—Å–∫–∏–π –º–∞—Ä—Å',
         '–ü–æ–ª—è—Ä–Ω—ã–π –∫—Ä—É–≥( 66 –ø–∞—Ä–∞–ª–ª–µ–ª—å )',
         '–ê—Ä–∫–∞–∏–º']

answers = ['–î–µ–º–∏–¥–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥ - –í—ã —Å–∏–ª—å–Ω—ã –¥—É—Ö–æ–º! –í–∞—à–µ–π —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä—É–¥–æ–ª—é–±–∏—é –Ω–µ—Ç —Ä–∞–≤–Ω—ã—Ö. –ï—Å–ª–∏ –±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–Ω–æ–≤–∞ –∏–∑–æ–±—Ä–µ—Å—Ç–∏ –ø–∞—Ä–æ—Ö–æ–¥, –≤—ã –±—ã —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–ª–∏. –î–ª—è –≤–∞—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–≥—Ä–∞–¥ –∏ –≤–∞—à–∏ –∞–º–±–∏—Ü–∏–∏ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã!',
           '–¢—É—Ä–≥–æ—è–∫ - –í—ã –≥–ª—É–±–æ–∫–∏–π –∏ —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –í—ã—Ö–æ–¥–∏—Ç—å —Å—É—Ö–∏–º–∏ –∏–∑ –≤–æ–¥—ã - —ç—Ç–æ –≤–∞—à–µ –∫—Ä–µ–¥–æ. –ì–æ—Ä–∏–∑–æ–Ω—Ç—ã –≤–∞—à–∏—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤ –∏ –∞–º–±–∏—Ü–∏–∏ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –±–µ–∑–∫—Ä–∞–π–Ω–∏–µ',
           '–£—Ä–∞–ª—å—Å–∫–∏–π –ú–∞—Ä—Å - –°–æ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è, —á—Ç–æ –≤—ã –Ω–µ —Å —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç—ã. –í–∞—à–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞—Ö–æ–¥—á–∏–≤–æ—Å—Ç—å –ø–æ—Ä–∞–∂–∞—é—Ç! –ü–æ—Ä–æ–π –≤–∞—à–∞ —Ñ–∞–Ω—Ç–∞–∑–∏—è —É–Ω–æ—Å–∏—Ç –≤–∞—Å –≤ –¥—Ä—É–≥–∏–µ –∫—Ä–∞—è –∏ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –≤–∞—Å –Ω–µ –º–æ–∂–µ—Ç —É–¥–µ—Ä–∂–∞—Ç—å',
           '–ü–æ–ª—è—Ä–Ω—ã–π –∫—Ä—É–≥ - –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è —Ö–æ–ª–æ–¥–Ω—ã–º –∏ –∑–∞–∫—Ä—ã—Ç—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º, –Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≤ –≤–∞—à–µ–º —Å–µ—Ä–¥—Ü–µ –∂–∏–≤—ë—Ç —Ç–µ–ø–ª–æ –∏ –ª—é–±–æ–≤—å, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–æ–±–Ω–æ —Å–µ–≤–µ—Ä–Ω–æ–º—É —Å–∏—è–Ω–∏—é –æ—Å–≤–µ—â–∞–µ—Ç –≤—Å–µ –≤–æ–∫—Ä—É–≥',
           '–ê—Ä–∫–∞–∏–º - –û–∫—Ä—É–∂–∞—é—â–∏–º –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤ –≤–∞—Å –∑–∞–∫–ª—é—á–µ–Ω–∞ –º—É–¥—Ä–æ—Å—Ç—å —Å—Ç–æ–ª–µ—Ç–∏–π, –∏ –æ–Ω–∏ –Ω–µ –æ—à–∏–±–∞—é—Ç—Å—è. –í—ã - –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ–ª–æ–¥–µ—Ü –∑–Ω–∞–Ω–∏–π –∏ —É–º–µ–Ω–∏–π. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏, –æ–Ω–∞ –≤–∞—Å –Ω–µ –ø–æ–¥–≤–µ–¥—ë—Ç!']

count = [0, 0, 0, 0, 0]

startMarkup = types.InlineKeyboardMarkup(row_width=1)
startButton = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å', callback_data='startBtn')

startMarkup.add(startButton)


q1Markup = types.InlineKeyboardMarkup(row_width=1)
q1v1Btn = types.InlineKeyboardButton(text='–£–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π', callback_data='1–î–µ–º–∏–¥–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥')
q1v2Btn = types.InlineKeyboardButton(text='–°–ø–æ–∫–æ–π–Ω—ã–π –∏ —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π', callback_data='1–¢—É—Ä–≥–æ—è–∫')
q1v3Btn = types.InlineKeyboardButton(text='–û–∑–æ—Ä–Ω–æ–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π', callback_data='1–£—Ä–∞–ª—å—Å–∫–∏–π –º–∞—Ä—Å')
q1v4Btn = types.InlineKeyboardButton(text='–•–æ–ª–æ–¥–Ω—ã–π –∏ –æ—Ç—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–º', callback_data='1–ü–æ–ª—è—Ä–Ω—ã–π –∫—Ä—É–≥( 66 –ø–∞—Ä–∞–ª–ª–µ–ª—å )')
q1v5Btn = types.InlineKeyboardButton(text='–ú—É–¥—Ä—ã–π –∏ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π', callback_data='1–ê—Ä–∫–∞–∏–º')

q1Markup.add(q1v1Btn, q1v2Btn, q1v3Btn, q1v4Btn, q1v5Btn)


q2Markup = types.InlineKeyboardMarkup(row_width=1)
q2v1Btn = types.InlineKeyboardButton(text='–Ø –ø–ª—ã–≤—É –ø–æ —Ç–µ—á–µ–Ω–∏—é', callback_data='2–¢—É—Ä–≥–æ—è–∫')
q2v2Btn = types.InlineKeyboardButton(text='–Ø –≤—Å–µ –±–µ—Ä—É –ø–æ–¥ —Å–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å', callback_data='2–î–µ–º–∏–¥–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥')
q2v3Btn = types.InlineKeyboardButton(text='–ñ–¥—É –ø–æ–∫–∞ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –∏–∑ –∫–æ—Å–º–æ—Å–∞', callback_data='2–£—Ä–∞–ª—å—Å–∫–∏–π –º–∞—Ä—Å')
q2v4Btn = types.InlineKeyboardButton(text='–ú–Ω–µ –≤—Å–µ —Ä–∞–≤–Ω–æ', callback_data='2–ü–æ–ª—è—Ä–Ω—ã–π –∫—Ä—É–≥( 66 –ø–∞—Ä–∞–ª–ª–µ–ª—å )')
q2v5Btn = types.InlineKeyboardButton(text='–ú–Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç –º—É–¥—Ä–æ—Å—Ç—å –ø—Ä–µ–¥–∫–æ–≤', callback_data='2–ê—Ä–∫–∞–∏–º')

q2Markup.add(q2v1Btn, q2v2Btn, q2v3Btn, q2v4Btn, q2v5Btn)

q31m = types.InlineKeyboardMarkup(row_width=1)
q3v1 = types.InlineKeyboardButton(text='–°–ø–∞–Ω—á–ë–æ–±', callback_data='3–¢—É—Ä–≥–æ—è–∫')
q3v2 = types.InlineKeyboardButton(text='–ó–≤—ë–∑–¥–Ω—ã–µ –≤–æ–∏–Ω—ã', callback_data='3–£—Ä–∞–ª—å—Å–∫–∏–π –º–∞—Ä—Å')
q3v3 = types.InlineKeyboardButton(text='–•–æ–ª–æ–¥–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ', callback_data='3–ü–æ–ª—è—Ä–Ω—ã–π –∫—Ä—É–≥( 66 –ø–∞—Ä–∞–ª–ª–µ–ª—å )')
q3v4 = types.InlineKeyboardButton(text='–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü', callback_data='3–ê—Ä–∫–∞–∏–º')
q3v5 = types.InlineKeyboardButton(text='–î–µ–≤—á–∞—Ç–∞', callback_data='3–î–µ–º–∏–¥–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥')
q31m.add(q3v1, q3v2, q3v3, q3v4, q3v5)

q4Markup = types.InlineKeyboardMarkup(row_width=1)
q4v1Btn = types.InlineKeyboardButton(text='–í—ã–±—Ä–∞–ª—Å—è –Ω–∞ —à–∞—à–ª—ã–∫–∏ —Å –¥—Ä—É–∑—å—è–º–∏', callback_data='4–¢—É—Ä–≥–æ—è–∫')
q4v2Btn = types.InlineKeyboardButton(text='–ü–æ—à–µ–ª –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é', callback_data='4–î–µ–º–∏–¥–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥')
q4v3Btn = types.InlineKeyboardButton(text='–ü–æ–ª–µ—Ç–µ–ª –≤ –∫–æ—Å–º–æ—Å', callback_data='4–£—Ä–∞–ª—å—Å–∫–∏–π –º–∞—Ä—Å')
q4v4Btn = types.InlineKeyboardButton(text='–ù–µ –≤—ã—Ö–æ–¥–∏–ª –∏–∑ –¥–æ–º–∞', callback_data='4–ü–æ–ª—è—Ä–Ω—ã–π –∫—Ä—É–≥( 66 –ø–∞—Ä–∞–ª–ª–µ–ª—å )')
q4v5Btn = types.InlineKeyboardButton(text='–ü–æ—à–µ–ª –≤ —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ —Ä–∞—Å–∫–æ–ø–∫–∏', callback_data='4–ê—Ä–∫–∞–∏–º')

q4Markup.add(q4v1Btn, q4v2Btn, q4v3Btn, q4v4Btn, q4v5Btn)

q5Markup = types.InlineKeyboardMarkup(row_width=1)
q5v1Btn = types.InlineKeyboardButton(text='–í –ê—Ç–ª–∞–Ω—Ç–∏–¥—É', callback_data='5–¢—É—Ä–≥–æ—è–∫')
q5v2Btn = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –¶–∞—Ä—Å–∫—É—é –†–æ—Å—Å–∏—é', callback_data='5–î–µ–º–∏–¥–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥')
q5v3Btn = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ 2600 –≥–æ–¥ –∏ –ø–æ–ª–µ—Ç–µ–ª –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–∞ –ú–∞—Ä—Å', callback_data='5–£—Ä–∞–ª—å—Å–∫–∏–π –º–∞—Ä—Å')
q5v4Btn = types.InlineKeyboardButton(text='–õ–µ–¥–Ω–∏–∫–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥', callback_data='5–ü–æ–ª—è—Ä–Ω—ã–π –∫—Ä—É–≥( 66 –ø–∞—Ä–∞–ª–ª–µ–ª—å )')
q5v5Btn = types.InlineKeyboardButton(text='–î—Ä–µ–≤–Ω–∏–π –ï–≥–∏–ø–µ—Ç', callback_data='5–ê—Ä–∫–∞–∏–º')

q5Markup.add(q5v1Btn, q5v2Btn, q5v3Btn, q5v4Btn, q5v5Btn)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –æ—Ç –∫–æ–º–∞–Ω–¥—ã Utravel media –∏ 4 –∫–∞–Ω–∞–ª–∞ üòä\n"
                         "–¢–µ—Å—Ç: <b>–ö–∞–∫–∞—è —Ç—ã –£—Ä–∞–ª—å—Å–∫–∞—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?</b>", parse_mode='html',
                         reply_markup=startMarkup)


@dp.message_handler()
async def send_error(message: types.Message):
    await message.reply('–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç—É, –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞')


@dp.callback_query_handler(text='startBtn')
async def start(message: types.Message):
    with open('media/que1.jpg', 'rb') as q1:
        await bot.send_photo(message.from_user.id, q1)
    await bot.send_message(message.from_user.id, "–í –æ–±—â–µ—Å—Ç–≤–µ —è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É—é —Å–µ–±—è –∫–∞–∫:", reply_markup=q1Markup)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('1'))
async def analyze(callback_query: types.CallbackQuery):
    code = callback_query.data[1:]
    count[words.index(code)] += 1

    with open('media/que2.jpg', 'rb') as q2:
        await bot.send_photo(callback_query.from_user.id, q2)
    await bot.send_message(callback_query.from_user.id, "–ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º —è —á–∞—â–µ –≤—Å–µ–≥–æ –∑–∞–Ω–∏–º–∞—é —Ç–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é:",
                           reply_markup=q2Markup)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('2'))
async def analyze2(callback_query: types.CallbackQuery):
    code = callback_query.data[1:]
    count[words.index(code)] += 1

    await bot.send_message(callback_query.from_user.id, "–° –∫–∞–∫–∏–º–∏ —Ñ–∏–ª—å–º–∞–º–∏ —Ç—ã —Å–µ–±—è –∞—Åc–æ—Ü–∏–∏—Ä—É–µ—à—å?")
    with open('media/spangebob.jpg', 'rb') as q31:
        await bot.send_photo(callback_query.from_user.id, q31, reply_markup=q31m)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('3'))
async def analyze2(callback_query: types.CallbackQuery):
    code = callback_query.data[1:]
    count[words.index(code)] += 1

    with open('media/que4.jpg', 'rb') as q4:
        await bot.send_photo(callback_query.from_user.id, q4)
    await bot.send_message(callback_query.from_user.id, "–í —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π —è –±—ã‚Ä¶", reply_markup=q4Markup)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('4'))
async def analyze2(callback_query: types.CallbackQuery):
    code = callback_query.data[1:]
    count[words.index(code)] += 1

    with open('media/que5.jpg', 'rb') as q5:
        await bot.send_photo(callback_query.from_user.id, q5)
    await bot.send_message(callback_query.from_user.id, "–ï—Å–ª–∏ –±—ã —É –º–µ–Ω—è –±—ã–ª–∞ –º–∞—à–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏, —è –±—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è‚Ä¶",
                           reply_markup=q5Markup)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('5'))
async def analyze2(callback_query: types.CallbackQuery):
    code = callback_query.data[1:]
    count[words.index(code)] += 1

    index = count.index(max(count))

    if index == 0:
        with open('media/demidov.jpg', 'rb') as a1:
            await bot.send_photo(callback_query.from_user.id, a1)
    elif index == 1:
        with open('media/turgoyak.jpg', 'rb') as a2:
            await bot.send_photo(callback_query.from_user.id, a2)
    elif index == 2:
        with open('media/mars.jpg', 'rb') as a3:
            await bot.send_photo(callback_query.from_user.id, a3)
    elif index == 3:
        with open('media/pol.jpg', 'rb') as a4:
            await bot.send_photo(callback_query.from_user.id, a4)
    elif index == 4:
        with open('media/arkaim.jpg', 'rb') as a5:
            await bot.send_photo(callback_query.from_user.id, a5)
    await bot.send_message(callback_query.from_user.id, answers[index])
    for i in range(len(count)):
        count[i] = 0


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)